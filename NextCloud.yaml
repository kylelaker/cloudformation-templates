---
AWSTemplateFormatVersion: '2010-09-09'

Description: >
  Creates a NextCloud instance with S3 bucket and IAM user

Parameters:
  InstanceType:
    Description: EC2 Instance Type
    Type: String
    Default: t3.nano
  ImageId:
    Description: EC2 Image Id
    Type: AWS::EC2::Image::Id
    Default: ami-064a0193585662d74
  NextCloudIamUserName:
    Description: Name of the IAM User that NextCloud will use to access S3
    Type: String
    Default: NextCloud
  AdminUser:
    Description: The name of the NextCloud administrator
    Type: String
    NoEcho: true
  AdminPass:
    Description: The password of the NextCloud administrator
    Type: String
    NoEcho: true
  NextCloudDnsName:
    Description: The FQDN of the NextCloud instance
    Type: String
  Route53HostedZone:
    Description: The Route 53 hosted zone for the FQDN
    Type: String
  KeyPair:
    Description: AWS EC2 KeyPair to use for the instance
    Type: String
  LetsEncryptEmail:
    Description: The email address to use for Lets Encrypt
    Type: String
  AllowedIcmpCidrBlock:
    Description: The CIDR block from which to allow ICMP
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  AllowedHttpCidrBlock:
    Description: The CIDR block from which to allow HTTP
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  AllowedHttpsCidrBlock:
    Description: The CIDR block from which to allow HTTPS
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  AllowedSshCidrBlock:
    Description: The CIDR block from which to allow SSH
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'

Resources:
  NextCloudSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: NextCloud SecurityGroup
      GroupName: NextCloudSG
      SecurityGroupIngress:
        - CidrIp: !Ref AllowedIcmpCidrBlock
          Description: Allow all ICMP
          FromPort: -1
          ToPort: -1
          IpProtocol: icmp
        - CidrIp: !Ref AllowedHttpCidrBlock
          Description: Allow all HTTP
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: !Ref AllowedHttpsCidrBlock
          Description: Allow all HTTPS
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
        - CidrIp: !Ref AllowedSshCidrBlock
          Description: Allow all SSH
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
  NextCloudDnsEntry:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref Route53HostedZone
      Name: !Ref NextCloudDnsName
      Type: A
      ResourceRecords:
        - !Ref NextCloudAddr
      TTL: "60"
  NextCloudAddr:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref NextCloudServer
  NextCloudEBS:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Size: 10
  NextCloudServer:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPair
      SecurityGroups:
        - !Ref NextCloudSg
      Volumes:
        - Device: /dev/sdh
          VolumeId: !Ref 'NextCloudEBS'
      UserData: 
        Fn::Base64: !Sub |
          #!/usr/bin/env bash
          apt update
          apt upgrade -y
          apt install -y wget python-pip
          wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          pip install aws-cfn-bootstrap-latest.tar.gz

          cfn-init -s ${AWS::StackName} -r NextCloudServer -c nextcloud --region ${AWS::Region}
          cfn-signal -e $? '${NextCloudWaitConditionHandle}'
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          nextcloud:
            - install_nextcloud
            - set_s3
        install_nextcloud:
          commands:
            00_install_nextcloud:
              command: "snap install nextcloud"
            01_set_admin:
              command: !Sub "/snap/bin/nextcloud.manual-install ${AdminUser} ${AdminPass}"
            02_trusted_domains_enable:
              command: !Sub "/snap/bin/nextcloud.occ config:system:set trusted_domains 1 --value ${NextCloudDnsName}"
            03_set_php_limit:
              command: "snap set nextcloud php.memory-limit=512M"
            04_set_bg_job_interval:
              command: "snap set nextcloud nextcloud.cron-interval=10m"
            05_enable_https:
              command: !Sub printf 'y\n${LetsEncryptEmail}\n${NextCloudDnsName}' | /snap/bin/nextcloud.enable-https lets-encrypt
        set_s3:
          commands:
            00_enable_files_external:
              command: "/snap/bin/nextcloud.occ app:enable files_external"
            01_create_s3_storage:
              command: !Sub 
                - >
                  /snap/bin/nextcloud.occ files_external:create
                  -c bucket=${NextCloudBucket}
                  -c region=${AWS::Region}
                  -c use_ssl=true
                  -c use_path_style=true
                  -c legacy_auth=false
                  -c key=${NextCloudUserAccessKey}
                  -c secret=${key_secret}
                  external_S3 amazons3 amazons3::accesskey
                - key_secret: !GetAtt NextCloudUserAccessKey.SecretAccessKey
  NextCloudWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !Ref 'NextCloudWaitConditionHandle'
      Timeout: '600'
  NextCloudWaitConditionHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  NextCloudBucket:
    Type: AWS::S3::Bucket
  NextCloudPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Users:
        - !Ref NextCloudUser
      PolicyName: NextCloudS3AccessPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:GetBucketLocation
              - s3:ListAllMyBuckets
            Resource: "arn:aws:s3:::*"
          - Effect: Allow
            Action:
              - s3:*
            Resource:
              - !GetAtt NextCloudBucket.Arn
              - !Sub
                - "${arn}/*"
                - arn: !GetAtt NextCloudBucket.Arn
  NextCloudUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Ref NextCloudIamUserName
  NextCloudUserAccessKey:
    Type: AWS::IAM::AccessKey
    DependsOn: NextCloudUser
    Properties:
      UserName: !Ref NextCloudIamUserName
